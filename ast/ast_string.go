// Code generated by "stringer -linecomment -type=BinaryOperatorType,PrimitiveType,UnaryOperatorType -output ast_string.go"; DO NOT EDIT.

package ast

import "strconv"

const _BinaryOperatorType_name = "'+''-''*''/''<''>''==''!='"

var _BinaryOperatorType_index = [...]uint8{0, 3, 6, 9, 12, 15, 18, 22, 26}

func (i BinaryOperatorType) String() string {
	if i < 0 || i >= BinaryOperatorType(len(_BinaryOperatorType_index)-1) {
		return "BinaryOperatorType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _BinaryOperatorType_name[_BinaryOperatorType_index[i]:_BinaryOperatorType_index[i+1]]
}

const _PrimitiveType_name = "'int''char'"

var _PrimitiveType_index = [...]uint8{0, 5, 11}

func (i PrimitiveType) String() string {
	if i < 0 || i >= PrimitiveType(len(_PrimitiveType_index)-1) {
		return "PrimitiveType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _PrimitiveType_name[_PrimitiveType_index[i]:_PrimitiveType_index[i+1]]
}

const _UnaryOperatorType_name = "'*''-''&'"

var _UnaryOperatorType_index = [...]uint8{0, 3, 6, 9}

func (i UnaryOperatorType) String() string {
	if i < 0 || i >= UnaryOperatorType(len(_UnaryOperatorType_index)-1) {
		return "UnaryOperatorType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _UnaryOperatorType_name[_UnaryOperatorType_index[i]:_UnaryOperatorType_index[i+1]]
}
